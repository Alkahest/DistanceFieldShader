/******************************************************************************
* The MIT License (MIT)
*
* Copyright (c) 2015 Fredrik Lindh
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
******************************************************************************/

#include "Common.usf"

/**
Uniform Buffers

//This buffer should contain variables that never, or very seldomly change
BEGIN_UNIFORM_BUFFER_STRUCT(FPixelShaderConstantParameters, )
DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FVector4, StartColor)
END_UNIFORM_BUFFER_STRUCT(FPixelShaderConstantParameters)

//This buffer is for variables that change very often (each fram for example)
BEGIN_UNIFORM_BUFFER_STRUCT(FPixelShaderDynamicParameters, )
DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(float, TextureParameterBlendFactor)
DECLARE_UNIFORM_BUFFER_STRUCT_MEMBER(FVector4, EndColor)
END_UNIFORM_BUFFER_STRUCT(FPixelShaderDynamicParameters)
*/


//PIXEL SHADER
//////////////


void MainVertexShader(
	float4 InPosition : ATTRIBUTE0,
	float2 InUV : ATTRIBUTE1,
	out float2 OutUV : TEXCOORD0,
	out float4 OutPosition : SV_POSITION
	)
{
	OutPosition = InPosition;
	OutUV = InUV;
}

Texture2D<uint> TextureParameter;
sampler TextureSampler;

void MainPixelShader(
	in float2 uv : TEXCOORD0,
	out float4 OutColor : SV_Target0
	)
{
	//First we need to unpack the uint material and retrieve the underlying R8G8B8A8_UINT values.
	float sizeX, sizeY;
	TextureParameter.GetDimensions(sizeX, sizeY);
	uint packedValue = TextureParameter.Load(int3(sizeX * uv.x, sizeY * uv.y, 0));
	uint a = (packedValue & 0xFF000000) >> 24;
	
	float distAlphaMask = a;

	if(PSVariables.OUTLINE && 
	   (distAlphaMask >= PSVariables.OUTLINE_MIN_VALUE_0) && 
	   (distAlphaMask <= PSVariables.OUTLINE_MAX_VALUE_1))
	{
		float OutlineFactor = 1.0f;
		if(distAlphaMask <= PSVariables.OUTLINE_MIN_VALUE_1)
		{
			OutlineFactor = smoothstep(PSVariables.OUTLINE_MIN_VALUE_0, 
									   PSVariables.OUTLINE_MIN_VALUE_1, 
									   distAlphaMask);
		}
		else
		{
			OutlineFactor = smoothstep(PSVariables.OUTLINE_MAX_VALUE_1, 
									   PSVariables.OUTLINE_MAX_VALUE_0, 
									   distAlphaMask);	
		}
		packedValue = lerp(packedValue, PSVariables.OUTLINE_COLOR, OutlineFactor);
	}

	if(PSVariables.SOFT_EDGES)
	{
		a *= smoothstep(PSVariables.SOFT_EDGE_MIN, PSVariables.SOFT_EDGE_MAX, distAlphaMask);
	}
	else
	{
		a = distAlphaMask >= 0.5;
	}

	if(PSVariables.OUTER_GLOW)
	{
		float4 glowTexel = tex2D(TextureSampler, uv + PSVariables.GLOW_UV_OFFSET);
		float4 glowColor = PSVariables.OUTER_GLOW_COLOR * smoothstep(PSVariables.OUTER_GLOW_MIN_D_VALUE,
																	 PSVariables.OUTER_GLOW_MAX_D_VALUE,
																	 glowTexel.a);
		packedValue = lerp(glowColor, packedValue, distAlphaMask);
	}
	
	uint r = (packedValue & 0x000000FF);
	uint g = (packedValue & 0x0000FF00) >> 8;
	uint b = (packedValue & 0x00FF0000) >> 16;

	OutColor = float4(r, g, b, a);
}